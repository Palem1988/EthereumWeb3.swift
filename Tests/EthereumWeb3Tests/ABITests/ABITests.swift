//
//  ABITests.swift
//  Web3_Tests
//
//  Created by Josh Pyles on 6/13/18.
//

import XCTest
import Foundation

@testable import EthereumWeb3
#if !COCOAPODS
@testable import PKEthereumWeb3
#endif


class ABITests: XCTestCase {
    
    func testEncodingSingleValues() {
        let encoded = "0x0000000000000000000000000000000000000000000000000000000000000001"
        XCTAssertEqual(try ABIDecoder.decode(.uint, from: encoded) as? BigUInt, 1, "should decode a single value")
    }
    
    func testEncodingDynamicArrays() {
        let string1 = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000036162630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000364656600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003676869000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036a6b6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036d6e6f0000000000000000000000000000000000000000000000000000000000"
        let expected1: [String] = ["abc", "def", "ghi", "jkl", "mno"]
        XCTAssertEqual(try ABIDecoder.decode([.array(type: .string, length: nil)], from: string1).first as? [String], expected1, "should decode array of dynamic elements")
        
        let string2 = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000002fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe"
        let expected2: [BigInt] = [BigInt(1), BigInt(-1), BigInt(2), BigInt(-2)]
        XCTAssertEqual(try ABIDecoder.decode([.array(type: .int256, length: nil)], from: string2).first as? [BigInt], expected2, "should decode array of static elements")
        
        let string
        let expected3: [[UInt32]] = [[1,2,3], [4,5,6]]
        XCTAssertEqual(try ABIDecoder.decode([.array(type: .array(type: .uint32, length: nil), length: nil)], from: string3).first as? [[UInt32]], expected3, "should decode nested array")
        
        let string4 = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000"
        let expected4 = [String]()
        XCTAssertEqual(try ABIDecoder.decode([.array(type: .string, length: nil)], from: string4).first as? [String], expected4, "should decode empty dynamic arrays")
    }
    
    func testEncodingFixedArrays() {
        let string1 = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000036162630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000364656600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003676869000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036a6b6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036d6e6f0000000000000000000000000000000000000000000000000000000000"
        let expected1 = ["abc", "def", "ghi", "jkl", "mno"]
        XCTAssertEqual(try ABIDecoder.decode([.array(type: .string, length: 5)], from: string1).first as? [String], expected1, "should decode fixed array of dynamic type")
        
        let string
        let expected2: [[UInt32]] = [[1,2,3], [4,5,6]]
        XCTAssertEqual(try ABIDecoder.decode([.array(type: .array(type: .uint32, length: nil), length: 2)], from: string2).first as? [[UInt32]], expected2, "should decode nested dynamic array")
        
        let string3 = "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006"
        let expected3: [[UInt32]] = [[1,2,3], [4,5,6]]
        XCTAssertEqual(try ABIDecoder.decode([.array(type: .array(type: .uint32, length: 3), length: 2)], from: string3).first as? [[UInt32]], expected3, "should decode nested fixed array")
        
        let string4 = ""
        let expected4 = [String]()
        XCTAssertEqual(try ABIDecoder.decode([.array(type: .uint, length: 0)], from: string4).first as? [String], expected4, "should decode empty arrays")
        
        let string5 = "00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001"
        XCTAssertEqual(try ABIDecoder.decode([.uint32, .bool], from: string5).first as? UInt32, 69, "should decode various values")
        XCTAssertEqual(try ABIDecoder.decode([.uint32, .bool], from: string5)[1] as? Bool, true, "should decode various values")
        
        let string6 = "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
        XCTAssertEqual(try ABI.decodeParameters(types: [.string, .bool, .array(type: .uint256, length: nil)], from: string6).count, 3, "should decode more various values")
        XCTAssertEqual(try ABI.decodeParameters(types: [.string, .bool, .array(type: .uint256, length: nil)], from: string6)[0] as? String, "dave", "should decode more various values")
        XCTAssertEqual(try ABI.decodeParameters(types: [.string, .bool, .array(type: .uint256, length: nil)], from: string6)[1] as? Bool, true, "should decode more various values")
        XCTAssertEqual(try ABI.decodeParameters(types: [.string, .bool, .array(type: .uint256, length: nil)], from: string6)[2] as? [BigUInt], [1, 2, 3], "should decode more various values")
        
        let string7 = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000"
        XCTAssertEqual((try ABIDecoder.decode([.tuple([.string, .int])], from: string7).first as? [Any])?.count, 2, "should decode a tuple")
        XCTAssertEqual((try ABIDecoder.decode([.tuple([.string, .int])], from: string7).first as? [Any])?.first as? String, "hello world", "should decode a tuple")
        XCTAssertEqual((try ABIDecoder.decode([.tuple([.string, .int])], from: string7).first as? [Any])?[1] as? BigInt, 8, "should decode a tuple")
        
        let string8 = "0x454f530000000000000000000000000000000000000000000000000000000000"
        XCTAssertThrowsError(try ABIDecoder.decode([.string], from: string8)) { err in
            XCTAssertNotNil(err as! ABIDecoder.Error, "should throw an error when parsing wrong type")
        }
    }
    
    func testFixedBytes() {
        let bytes = Data("Hi!".utf8)
        XCTAssertEqual(try ABIDecoder.decode([.bytes(length: UInt(bytes.count))], from: try ABIEncoder.encode([.fixedBytes(bytes)]))[0] as? Data, bytes, "should encode and decode")
    }
    
    func testDynamicBytes() {
        let bytes = Data("Hi!".utf8)
        XCTAssertEqual(try ABIDecoder.decode([.bytes(length: nil)], from: ABIEncoder.encode([.bytes(bytes)]))[0] as? Data, bytes, "should encode and decode")
    }
}
